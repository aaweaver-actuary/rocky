I need you to create a step-by-step guide for creating a class structure for a property-casualty reserving model. The structure should have the following characteristics:
1. All classes use dataclasses syntax.
2. Assume that design matrices `X` and response vectors `y` are already created and are able to be passed to the __init__ method as arguments.
3. There is a general `BaseEstimator` class that all other classes inherit from. This class handles methods and attributes common to all classes, and is reproduced below.
   1. Assume that the linear design matrix `X` and response vector `y` are already created and are able to be passed to methods as arguments.
   2. Do not rewrite the `BaseEstimator` class. Instead, copy and paste the class code into your answer.
4. There is a general `GLM` class inheriting from the `BaseEstimator` class that handles methods and attributes common to all GLM models, and also uses dataclasses syntax.
   1. Assume that the linear design matrix `X` and response vector `y` are already created and are able to be passed to methods as arguments.
5. There are two classes inheriting from the `GLM` class: `Poisson` and `Gamma`, which handle methods and attributes specific to each of these models. 
   1. These classes are used to fit poisson and gamma regressors from the `scikit-learn` package, and y
   2. Assume that the linear design matrix `X` and response vector `y` are already created and are able to be passed to methods as arguments.
6. All GLM classes need to update their:
   1. a `fit` method that fits the model and returns the fitted model object.
   2. a `predict` method that predicts the response vector `y` from the fitted model object, and a given design matrix `X`.
   3. a `summary` method that prints a summary of the fitted model object.
   4. a `score` method that returns an appropriate score for the fitted GLM model object (e.g. R-squared for linear regression, deviance for logistic regression, etc.).
   5. a forecast method that returns a forecast of the response vector `y` from the fitted model object, and a special design matrix `X` that consists of all possible combinations of accident period and development period (keeping in mind that the accident period parameters are trends and not actual accident periods, and the development period parameters are trends and not actual development periods)
7. For each of `Poisson` and `Gamma`:
   1. these classes are implemented with dataclasses syntax.
   2. there are at least two classes of parameters:
      1. `alpha` 
         1. represent accident period trends in the accident year level.
         2. represent growth or decay in the accident year level across years. 
         3. these parameters are expected to generally increase over time as the accident period increases.
      2. `beta`
         1. represent development period trends 
         2. represent growth and decay in the development from one age to the next. 
         3. these parameters are expected to generally decay after the first few development ages, until they eventually decay to a value representing 0 incremental paid loss.
   3. for each of the `alpha` and `beta` parameters, they should implement elastic net regularization separately.
   4. there is also a standard interept parameter `x_0` that is not regularized.
 
I need you to create a step-by-step guide describing how to implement this structure. In your guide be sure that you include the following:
1. The bulk of your guide should be a list of steps, each step describing how to implement a single method.
2. Each step in your answer should refer to an individual method, and should include the following:
   1. The method name.
   2. The method docstring.
   3. The method code.
   4. Sample method output.
3. Do not combine multiple methods into a single step. 
   1. For example, do not combine the `fit` and `predict` methods into a single step. Instead, create two separate steps, one for the `fit` method and one for the `predict` method.


Your answer should use this structure as a template. You can copy and paste the template into your answer, and then fill in the [blanks] with your own code and output.

1. [class name]
   1. [class attributes]
   2. [class code, with docstring]
   3. [method1 name]
      1. [method1 code, with docstring]
   4. [method2 name]
      1. [method2 code, with docstring]
   5. [method3 name]
      1. [method3 code, with docstring]

Here is an overview of the class structure:

**1. BaseEstimator:**
(listed below, no need to reproduce)

**2. GLM:**

The `GLM` class is a class that inherits from `BaseEstimator`. It handles methods and attributes common to all GLM models. It has the following additional attributes and methods:

Attributes:
- `alpha`: A class of parameters that represent accident period trends in the accident year level.
- `beta`: A class of parameters that represent development period trends.

Methods:
- `fit`: A method that fits the model and returns the fitted model object.
- `predict`: A method that predicts the response vector `y` from the fitted model object, and a given design matrix `X`.
- `summary`: A method that prints a summary of the fitted model object.
- `score`: A method that returns an appropriate score for the fitted model object.
- `forecast`: A method that returns a forecast of the response vector `y` from the fitted model object, and a special design matrix `X` that consists of all possible combinations of accident period and development period.
- Elastic net regularization is implemented separately for each of the `alpha` and `beta` parameters.

**3. Poisson/Gamma:**

The `Poisson/Gamma` class is a class that inherits from `GLM`. It handles methods and attributes specific to each of these models. It has the following additional attributes and methods:

Attributes:
- `alpha`: A class of parameters that represent accident period trends in the accident year level.
- `beta`: A class of parameters that represent development period trends.
- There is also a standard intercept parameter `x_0` that is not regularized.

Methods:
- `fit`: A method that fits the model and returns the fitted model object.
- `predict`: A method that predicts the response vector `y` from the fitted model object, and a given design matrix `X`.
- `summary`: A method that prints a summary of the fitted model object.
- `score`: A method that returns an appropriate score for the fitted model object.
- `forecast`: A method that returns a forecast of the response vector `y` from the fitted model object, and a special design matrix `X` that consists of all possible combinations of accident period and development period.
- Elastic net regularization is implemented separately for each of the `alpha` and `beta` parameters.


@dataclass
class BaseEstimator:
    """
    A general class that all other classes inherit from.
    """
    X: np.ndarray = None
    y: np.ndarray = None

    def fit(self):
        """
        A method that fits the model and returns the fitted model object.
        """
        raise NotImplementedError("This method is not implemented yet, and needs to be implemented in the subclass.")

    def predict(self, X):
        """
        A method that predicts the response vector `y` from the fitted model object, and a given design matrix `X`.
        """
        raise NotImplementedError("This method is not implemented yet, and needs to be implemented in the subclass.")

    def summary(self):
        """
        A method that prints a summary of the fitted model object.
        """
        raise NotImplementedError("This method is not implemented yet, and needs to be implemented in the subclass.")

    def score(self):
        """
        A method that returns an appropriate score for the fitted model object.
        """
        raise NotImplementedError("This method is not implemented yet, and needs to be implemented in the subclass.")

    def plot(self, type=None):
        """
        A subclass that handles plotting, including pp plots, qq plots, actual vs predicted plot, scatter plot of normalized residuals,
        boxplots of normalized residuals, deviance residuals scatterplots, and deviance residual histograms.
        """
        raise NotImplementedError("This method is not implemented yet, and needs to be implemented in the subclass.")



Assume both GLM models are fit with `sklearn`'s `PoissonRegressor` or `GammaRegressor` class, so define the `fit` method in the `GLM` class as follows:

@dataclass
class GLM(BaseEstimator):
      """A class that handles methods and attributes common to all GLM models."""
      X : np.ndarray = None # The linear design matrix.
      y : np.ndarray = None # The response vector.
      model : object = None # This will be the fitted model object, but is specific to each model, so it is not defined here.
      alpha : np.ndarray = None # A class of parameters that represent accident period trends in the accident year level.
      beta : np.ndarray = None # A class of parameters that represent development period trends.

   def __post_init__(self):
        """Initialize the class."""
        self.X_base = X
        self.y_base = y
        self.model_base = model

   def combine(self, param : list = None):
         """
         Create a new design matrix that combines any number of parameters from X_base so that the parameter estimates are exactly the same for 
         the parameters in param.

         Changes the value of self.X (but not self.X_base)
         """
         X = self.X_base.copy()
         for p in param:
             X = np.hstack((X, self.X_base[:, p]))
         self.X = X

    def fit(self):
        """Fit the model and return the fitted model object."""
        self.X = X
        self.y = y
        self.model.fit(self.X, self.y)