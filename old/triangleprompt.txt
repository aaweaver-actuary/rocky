I am making a python dataclass that represents a loss triangle used in property casualty insurance loss reserving. My `Triangle` object should have the following attribues:
1. id - this is the type of triangle the object represents - paid loss, reported loss, etc
2. origin - this is an array-like structure that represents the rows in a triangle, or the cohort of claims being analyzed. this can be more than one column, for example if the origin period is accident quarter, you will have a year in one column and a quarter in the 2nd
3. development - another array-like structure that represents the columns in a loss triangle, or the time that has elapsed since the start of the origin
4. values - this is a 2d array that represents the values in the triangle. the rows represent the origin and the columns represent the development. the values are the loss amounts or counts or some other quantity for each origin and development combination

I have the following start:
@dataclass
class Triangle:
    """
    Create a `Triangle` object. The `Triangle` object is used to store and manipulate triangle data.
    No data is passed to the constructor. Data is passed to the `Triangle` object using the
    `from_array` or `from_dataframe` methods. 

    Parameters:
    -----------
    `name`: `str`, default=`None`
        The name of the triangle. This is used to identify the triangle in plots,
        models, and other outputs. This is required, and will raise an error if not passed.
    `triangle_type`: `str`, default=`None`
        The type of triangle. This is used to determine how to perform loss triangle
        analysis, and will ensure that only valid types are passed, as well as there
        only being at most one of each type of triangle in a ROCKY3 object. This is
        required, and will raise an error if not passed.
    """
    id : str = None
    tri : pd.DataFrame = None
    triangle_type : str = None
    triangle_loaded: bool = False

    def __repr__(self) -> str:
        return f"Triangle({self.id})"
    
    def __str__(self) -> str:
        return f"Triangle({self.id})"
    
    def set_id(self, id: str) -> None:
        """
        Set the id of the triangle.

        Parameters:
        -----------
        `id`: `str`
            The id of the triangle.

        Returns:
        --------
        `None`
        """
        # ensure that the id is a string
        if not isinstance(id, str):
            raise TypeError('The id must be a string.')
        
        # ensure the id is allowed
        if id.lower().replace(" ", "_") in triangle_type_aliases:
            self.id = id.lower().replace(" ", "_")
        else:
            print(f'The id {id} is not allowed. It must be one of the following:')
            for alias in triangle_type_aliases:
                print(f"  - {alias}")
            print()
            raise ValueError('The id is not allowed.')

Does this look like a good start? Can you think of a better way to handle the attributes?